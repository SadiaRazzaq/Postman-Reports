{
	"info": {
		"_postman_id": "2ab379b1-857f-43e8-9bb7-be5c937d08b1",
		"name": "Assignment1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CREATE USER",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var user_name = \"morpheus\"",
							"var user_job =  \"leader\"",
							"var name_1 = \"sadia\"",
							"",
							"pm.environment.set(\"user_name\", user_name);",
							"pm.environment.set(\"user_job\", user_job);",
							"pm.environment.set(\"name_user\", name_1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Person name is same \", function () {",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"user_name\"));",
							"});",
							" ",
							"pm.test(\"Person job is same\", function () {",
							"    pm.expect(jsonData.job).to.eql(pm.environment.get(\"user_job\"));",
							"});",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"job\": \"{{user_job}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "LIST USERS Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"jsondata = JSON.parse(responseBody)",
							"value1 = jsondata.data[1].first_name",
							"pm.environment.set(\"username\", value1);",
							"value2 = jsondata.data[3].id",
							"pm.environment.set(\"user_id\", value2);",
							"value3 = jsondata.page",
							"pm.environment.set(\"page_num\", value3);",
							"value4 = jsondata.per_page",
							"pm.environment.set(\"per_page\", value4);",
							"",
							"",
							"pm.test(\" Page number Verification \", function () {",
							"    //var jsonData = pm.response.json();",
							"    pm.expect(jsondata.page).to.eql(pm.environment.get(\"page_num\"));",
							"});",
							"",
							"",
							"for(var i=1 ; i<=(pm.environment.get(\"per_page\")) ; i++){",
							"pm.test('Data is not null at index ' +  (i-1) ), function () {",
							"    pm.expect(jsondata.data[i]).is.not.null;",
							"    ",
							"};",
							"};",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{URL}}/api/users/?page=2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						""
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"jsondata = JSON.parse(responseBody)",
							"job = jsondata.job",
							"pm.environment.set(\"userjob\", job);",
							"",
							"pm.test(\"Verify name and job\", function () {",
							"    //var jsonData = pm.response.json();",
							"    pm.expect(jsondata.name).to.eql( pm.environment.get(\"username\"));",
							"    pm.expect(jsondata.job).to.eql(pm.environment.get(\"userjob\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{username}}\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users/{{user_id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Name updated\", function () {",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = \"Janet\"",
							"pm.environment.set(\"name\", name);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{name}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users/{{user_id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET SINGLE USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"ID is same as the user id \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"user_id\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{URL}}/api/users/{{user_id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Random user 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Person name is same \", function () {",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"user_name\"));",
							"});",
							" ",
							"pm.test(\"Person job is same\", function () {",
							"    pm.expect(jsonData.job).to.eql(pm.environment.get(\"user_job\"));",
							"});",
							" "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var user_name = \"morpheus\" + pm.variables.replaceIn('{{$randomInt}}');",
							"var user_job =  \"leader\" + pm.variables.replaceIn('{{$randomInt}}');",
							"",
							"pm.environment.set(\"user_name\", user_name);",
							"pm.environment.set(\"user_job\", user_job);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{user_name}}\",\n    \"job\": \"{{user_job}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/users/{{user_id}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "LOGIN UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email1}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "REGISTER UNSUCCESSFUL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Data is not null\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).is.not.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"sydney@fife\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		}
	]
}